#============================================================================
# ${XEN_SCRIPT_DIR}/vif-post.d/00-vif-xenguest.hook
#
# Script for performing local configuration of a vif.
# This script will be sourced by, e.g., vif-bridge after the hotplugging
# system calls vif-bridge. The script is here and not simply executed as
# a udev rule because this allows simple access to several environment
# variables set by the calling vif-* script.
#
# Environment vars:
# command     (add|remove|online|offline)
# dev         vif interface name (required).
# main_ip     IP address of Dom0
# ip          list of IP networks for the vif, space-separated
# XENBUS_PATH path to this device's details in the XenStore (required).
#============================================================================

domid=$(xenstore_read "${XENBUS_PATH}/frontend-id")
guestname=$(xenstore_read "/local/domain/${domid}/name")
bridge=$(xenstore_read "${XENBUS_PATH}/bridge")
mac=$(xenstore_read "$XENBUS_PATH/mac")
kea_conf_file="/etc/kea/kea-dhcp4.conf"

if [ ! -f /etc/xenguest/guests/${guestname}/params.cfg ]; then
    log debug "No /etc/xenguest/guests/${guestname}/params.cfg. Exiting."
    return
fi

# Source the params file to get the choosen XENGUEST_NETWORK_TYPE
. /etc/xenguest/guests/${guestname}/params.cfg

# We need to get the xenguest subnet prefix to set the subnet and
# the fixed ip to assing to the guest.
get_subnet_prefix() {
    # ${vif_ip} is set in the vif-nat script
    echo ${vif_ip} | awk -F. '{print $1"."$2"."$3}'
}

subnetprefix=$(get_subnet_prefix)

kea_remove_conf_entry()
{
    log debug "kea_remove_conf_entry"
    claim_lock "vif-nat-kea"

    # Remove the the xenguest kea config file inclusion in the kea main config
    sed -i "/${kea_guest_config//'/'/'\/'}/d" "${kea_conf_file}"

    # Remove interface entry 1st case: [ "dev1", "dev_to_remove" ]
    sed -i "s/,\ \"$dev\"//" "${kea_conf_file}"
    # Remove interface entry 2nd case: [ "dev_to_remove", "dev1" ]
    sed -i "s/\"$dev\",\ //" "${kea_conf_file}"
    # Remove interface entry 3rd case: [ "dev_to_remove" ]
    sed -i "s/\[\ \"$dev\"\ \]/\[\ \]/" "${kea_conf_file}"

    # Remove the generated the xenguest kea subnet conf file
    rm ${XENGUEST_KEA_SUBNET_CONFIG}

    keactrl reload

    release_lock "vif-nat-kea"
}

kea_add_conf_entries()
{
    log debug "kea_add_conf_entries"
    claim_lock "vif-nat-kea"

    # Include vif in the interfaces 1st case - no other entries:
    search_for='\"interfaces\": \[ '
    sed -i "/${search_for}\"*\"\ */ s/\ \]/,\ \"${dev}\"\ \]/g" "${kea_conf_file}"
    sed -i "s/${search_for}]/${search_for}\"${dev}\"\ \]/g" "${kea_conf_file}"

    # Include the xenguest kea subnet conf file in the kea main config
    search_for='\"subnet4\": \['
    sed -i "/$search_for/a $kea_guest_config" "${kea_conf_file}"

    # Generate the xenguest kea subnet conf file
    echo -e "$(eval "echo -e \"$(cat ${XENGUEST_KEA_SUBNET_TEMPLATE})\"")" \
            > "${XENGUEST_KEA_SUBNET_CONFIG}"

    release_lock "vif-nat-kea"
}

call_extra_hooks() {
    for f in /etc/xenguest/guests/${guestname}/files/*.hook; do
        if [ -x "$f" ]; then
            log info "Executing $f"
            . "$f"
            if [ $? -ne 0 ]; then
                log err "$f failed."
            fi
        else
            log info "$f is not executable. Skipping."
        fi
    done
}

case "${XENGUEST_NETWORK_TYPE}" in
    nat)
        XENGUEST_KEA_SUBNET_TEMPLATE=${XENGUEST_KEA_SUBNET_TEMPLATE:-"/etc/xenguest/guests/${guestname}/files/kea-subnet4.json"}
        if [ ! -f ${XENGUEST_KEA_SUBNET_TEMPLATE} ]; then
            log debug "No ${XENGUEST_KEA_SUBNET_TEMPLATE} file. Aborting"
            return
        fi

        XENGUEST_KEA_SUBNET_CONFIG="/etc/kea/kea-subnet4.dom$domid.json"
        if [ ! -d "$(dirname ${XENGUEST_KEA_SUBNET_CONFIG})" ]; then
            log debug "No kea configuration directory. Aborting"
            return
        fi
        kea_guest_config="\ \ \ \ <?include \"${XENGUEST_KEA_SUBNET_CONFIG}\"?>"

        case "$command" in
            online)
                kea_add_conf_entries

                # Enable ip forwarding and NAT for the ${bridge} interface
                sysctl -w net.ipv4.ip_forward=1
                iptables_w -t nat -A POSTROUTING -o ${bridge} -j MASQUERADE -m comment --comment "dom${domid}"
                ;;
            offline)
                kea_remove_conf_entry

                # Remove the NAT iptables rules created for the dom${domid}
                guest_ipt_rule=$(iptables_w -t nat -vL POSTROUTING -n --line-number | grep -w dom${domid} | awk '{print $1}' | tac)
                for rule in ${guest_ipt_rule}; do iptables_w -t nat --delete POSTROUTING ${rule}; done

                # If there is no more NAT iptables rules we disable ip forwarding
                ipt_nat_rules=$(iptables_w -t nat -vL POSTROUTING -n --line-number | grep MASQUERADE | awk '{print $1}')
                [ -z "${ipt_nat_rules##*[!0-9]*}" ] && sysctl -w net.ipv4.ip_forward=0
               ;;
        esac

        # We might have extra configs to be applied (e.g.: NAT port forward).
        call_extra_hooks
        ;;
esac
